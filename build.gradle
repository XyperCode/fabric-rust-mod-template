plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"mymod" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
	
    // Include the native library in the mod JAR
    from('src/main/rust/target/release') {
        include '*.so', '*.dll', '*.dylib'
        into 'natives'
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

task buildRust(type: Exec) {
    workingDir 'src/main/rust' // Path to the Rust project
    commandLine 'cargo', 'build', '--release'
}

compileJava.dependsOn buildRust

// Define the source and output directories for JNI headers
afterEvaluate {
	def jniHeadersDir = file("$buildDir/generated/jni-headers")
	def jniClassesDir = file("$buildDir/classes/java/main")

	task generateJNIHeaders(type: Exec) {
		// Ensure the output directory exists
		doFirst {
			jniHeadersDir.mkdirs()
		}

		workingDir projectDir
		
		// Compile Java classes and generate JNI headers
		commandLine 'javac', '-h', jniHeadersDir, '-d', jniClassesDir,
				'-cp', sourceSets.main.runtimeClasspath.asPath,
				'src/main/java/dev/ultreon/xypercode/mods/MyMod.java'

		// Include additional Java files if needed
	}
	
	compileJava.dependsOn generateJNIHeaders
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}